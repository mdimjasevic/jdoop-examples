<?xml version="1.0" encoding="UTF-8"?>

<project name="Randoop unit tests" default="report" xmlns:jacoco="antlib:org.jacoco.ant">
    
    <property name="src.dir" location="./src/main" />
    <property name="src.tests.dir" location="./tests-randoop" />
    <property name="src.examples.dir" location="./src/examples" />
    <property name="result.dir" location="./build" />
    <property name="result.classes.dir" location="${result.dir}" />
    <property name="result.tests.dir" location="${result.dir}/tests" />
    <property name="result.report.dir" location="${result.dir}/site/jacoco" />
    <property name="result.exec.file" location="${result.dir}/jacoco.exec" />
    
    <!-- Step 1: Import JaCoCo Ant tasks -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib/jacocoant.jar" />
    </taskdef>
    
    <target name="clean">
        <delete dir="${result.report.dir}" />
        <delete dir="${result.exec.dir}" />
        <delete dir="${result.tests.dir}" />
        <delete dir="${src.tests.dir}" />
    </target>

    <target name="make-class-list">
        <exec executable="python">
	    <arg line="classlist.py --path org/apache/commons/net"/>
	</exec>
    </target>

    <target name="generate-tests" depends="clean,make-class-list">
        <mkdir dir="${src.tests.dir}" />
        <java classname="randoop.main.Main">
            <arg value="gentests" />
            <arg value="--classlist=classlist.txt"/>
	    <arg value="--forbid-null=false"/>
	    <arg value="--junit-output-dir=${src.tests.dir}"/>
            <arg value="--timelimit=3600"/>
            <arg value="--outputlimitrandom=100000000"/>
            <classpath>
                <pathelement location="${result.classes.dir}/examples"/>
                <pathelement location="lib/randoop.jar"/>
                <pathelement location="lib/junit4.jar"/>
            </classpath>
        </java>
    </target>

    <target name="compile-tests" depends="generate-tests">
        <mkdir dir="${result.tests.dir}" />
        <javac srcdir="${src.tests.dir}" destdir="${result.tests.dir}" debug="true" includeantruntime="false">
            <classpath>
                <pathelement location="${result.classes.dir}" />
                <pathelement location="${result.classes.dir}/examples" />
                <pathelement location="lib/junit4.jar" />
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-tests">
        <jacoco:coverage destfile="${result.exec.file}">
            <junit fork="true" forkmode="once">
                <test name="RandoopTest"/>
                <classpath>
                    <pathelement location="lib/junit4.jar"/>
                    <pathelement location="${result.classes.dir}/examples"/>
                    <pathelement location="${result.classes.dir}"/>
                    <pathelement location="${result.tests.dir}"/>
                    <pathelement location="${result.dir}"/>
                </classpath>
            </junit>
        </jacoco:coverage>
    </target>

    <target name="report" depends="test">
        <!-- Step 3. Create coverage report -->
        <jacoco:report>
            
            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="${result.exec.file}" />
            </executiondata>
            
            <!-- the class files and optional source files ... -->
            <structure name="JaCoCo code coverage report for Randoop-generated tests">
                <classfiles>
                    <fileset dir="${result.dir}/examples">
                        <include name="org/apache/commons/net/**/*.class" />
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.examples.dir}" />
                </sourcefiles>
            </structure>
            
            <!-- to produce reports in different formats. -->
            <html destdir="${result.report.dir}" />
            <csv destfile="${result.report.dir}/report.csv" />
            <xml destfile="${result.report.dir}/report.xml" />
        </jacoco:report>
    </target>
    
    <target name="rebuild" depends="clean,report" />
    
</project>
